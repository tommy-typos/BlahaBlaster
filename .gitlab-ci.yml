# This file is a template, and might need editing before it works on your project.
# This is a sample GitLab CI/CD configuration file that should run without any modifications.
# It demonstrates a basic 3 stage CI/CD pipeline. Instead of real tests or scripts,
# it uses echo commands to simulate the pipeline execution.
#
# A pipeline is composed of independent jobs that run scripts, grouped into stages.
# Stages run in sequential order, but jobs within stages run in parallel.
#
# For more information, see: https://docs.gitlab.com/ee/ci/yaml/index.html#stages
#
# You can copy and paste this template into a new `.gitlab-ci.yml` file.
# You should not add this template to an existing `.gitlab-ci.yml` file by using the `include:` keyword.
#
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Getting-Started.gitlab-ci.yml

# Define the stages used in the pipeline
stages:
  - build
  - test
  - deploy

# Define the Docker image used for all jobs unless overridden in the job
image: maven:3.8.4-jdk21-image

# Define the paths that should be cached between pipeline runs
cache:
  paths:
    - .m2/repository  # Maven's local repository where dependencies are stored

# Build job: compiles the code, runs static checks, and generates project reports
build-job:
  stage: build  # Assign to 'build' stage
  script:       # List of commands to execute
    - mvn checkstyle:check           # Run Checkstyle for code style auditing
    - mvn site                       # Generate the site with documentation and reports
    - mvn pmd:pmd                    # Run PMD to find common Java flaws
    - mvn spotbugs:spotbugs          # Run SpotBugs for static code analysis
  artifacts:                         # Specify files to save after job runs
    paths:
      - target/site                 # Store site generation output
    expire_in: 1 week               # Keep artifacts for one week

# Test job: runs unit tests and produces test reports
unit-test-job:
  stage: test  # Assign to 'test' stage
  script:
    - mvn test  # Execute unit tests
  artifacts:    # Generate reports from test results
    reports:
      junit: target/surefire-reports/TEST-*.xml  # JUnit format is useful for integration in GitLab UI

# Deployment job: deploys the application, requires manual trigger if conditions are met
deploy-job:
  stage: deploy
  script:
    - mvn install  # This command builds the project and installs the package to the local repository.
  artifacts:
    paths:
      - target/*.jar  # This specifies that all JAR files in the target directory should be saved as artifacts.
